using System;
using System.Collections.Generic;
using UnityEngine;

namespace Mod
{
    public class MainModClass
    {
        public static void Main()
        {
            Liquid.Register("OrangeJuiceBlood", (Liquid)new OrangeJuiceBlood());//Basically registers our Liquid...
            Liquid.Register("LimeSlime", (Liquid)new LimeSlime());


            //Our First Custom Human...
            ModAPI.Register(new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Human"), //We basically derive from an already existing item in the game to create a new on...in this case we have a human...
                NameOverride = "Custom Human 1", // the name of the custom Human...
                NameToOrderByOverride = "Custom Human 1", //Sortingorder in the Category....0 comes before 1 one as an example and Custom Human 1 would come befor the Human in the Menu because c is before h in´the alphabet...
                DescriptionOverride = "This is a custom description to a custom Human...", //Explains itself, a simple description of your Human / Item / ect......
                CategoryOverride = ModAPI.FindCategory("Entities"), // This is the Category in which our Human should appear in...
                ThumbnailOverride = ModAPI.LoadSprite("Textures/CustomHuman1Thumbnail.png"), //The Thumbnail...
                AfterSpawn = (Instance) =>
                {
                    var skin = ModAPI.LoadTexture("Textures/CustomHuman1Skin.png"); //The Skin texture for the Human...
                    var flesh = ModAPI.LoadTexture("Textures/CustomHuman1Flesh.png"); //The Flesh texture for the Human...
                    var bone = ModAPI.LoadTexture("Textures/CustomHuman1Bone.png"); //The Bone texture for the Human...

                    var PersonBehaviourComponent = Instance.GetComponent<PersonBehaviour>(); // this gets the personbehaviour component of the Human we want to modify...

                    PersonBehaviourComponent.SetBodyTextures(skin, flesh, bone, 1); //This sets the textures of our custom Human to the of our own, instead of just the normal ones...The last value or the 1 has something to do with the texture size or so...

                    PersonBehaviourComponent.SetBruiseColor(178, 0, 178); //Here we set the R.G.B (Red, Green, Blue) values for our bruises -> this would be purple like color...
                    PersonBehaviourComponent.SetSecondBruiseColor(154, 0, 7);
                    PersonBehaviourComponent.SetThirdBruiseColor(207, 206, 120);
                    PersonBehaviourComponent.SetRottenColour(202, 199, 104);
                    PersonBehaviourComponent.SetBloodColour(108, 0, 4); // this doesn't set the Liquid color of the human blood...if we want to change the blood type or color however, we musst then create our own "liquid"...,which I will show in a later Tutorial...

                    DecalDescriptor DecalDescriptor1 = ScriptableObject.CreateInstance<DecalDescriptor>(); //Overrides or gets the DecalDescriptor, which handles some stuff about the Blood, ect...

                    foreach (LimbBehaviour Limb in PersonBehaviourComponent.Limbs) //Gets every Personbehaviour in each Limb...
                    {
                        DecalDescriptor1.Sprites = Limb.BloodDecal.Sprites; //Sets BloodDecalsprites...
                        DecalDescriptor1.IgnoreRadius = Limb.BloodDecal.IgnoreRadius; //something about the radius of the Decals...
                        DecalDescriptor1.Color = new Color(OrangeJuiceBlood.RedColorValue, OrangeJuiceBlood.GreenColorValue, OrangeJuiceBlood.BlueColorValue, OrangeJuiceBlood.TransparencyValue); //Sets the Decal Color to the of our own custom Liquid...(R,G,B,A)
                        Limb.BloodDecal = DecalDescriptor1; //Overrides foreach Limb the DecalDescriptor....
                        Limb.BloodLiquidType = "OrangeJuiceBlood"; //Sets the Bloodtype to our own custom Liquid
                        Limb.CirculationBehaviour.Drain(Limb.CirculationBehaviour.Limits.y); //Drains every other Liquid in the Human...
                        double num = (double)Limb.CirculationBehaviour.AddLiquid(Liquid.GetLiquid("OrangeJuiceBlood"), Limb.CirculationBehaviour.Limits.y); //Fills the Human with our Custom Blood instead...
                    }
                }
            });

            //Our Second Custom Human
            ModAPI.Register(new Modification()
            {
                OriginalItem = ModAPI.FindSpawnable("Human"), //We basically derive from an already existing item in the game to create a new on...in this case we have a human...
                NameOverride = "Custom Human 2", // the name of the custom Human...
                NameToOrderByOverride = "Custom Human 2", //Sortingorder in the Category....0 comes before 1 one as an example and Custom Human 1 would come befor the Human in the Menu because c is before h in´the alphabet...
                DescriptionOverride = "This is a custom description to another custom Human...", //Explains itself, a simple description of your Human / Item / ect......
                CategoryOverride = ModAPI.FindCategory("Entities"), // This is the Category in which our Human should appear in...
                ThumbnailOverride = ModAPI.LoadSprite("Textures/CustomHuman2Thumbnail.png"), //The Thumbnail...
                AfterSpawn = (Instance) =>
                {
                    var skin = ModAPI.LoadTexture("Textures/CustomHuman2Skin.png"); //The Skin texture for the Human...
                    var flesh = ModAPI.LoadTexture("Textures/CustomHuman2Flesh.png"); //The Flesh texture for the Human...
                    var bone = ModAPI.LoadTexture("Textures/CustomHuman2Bone.png"); //The Bone texture for the Human...

                    var PersonBehaviourComponent = Instance.GetComponent<PersonBehaviour>(); // this gets the personbehaviour component of the Human we want to modify...

                    PersonBehaviourComponent.SetBodyTextures(skin, flesh, bone, 1); //This sets the textures of our custom Human to the of our own, instead of just the normal ones...The last value or the 1 has something to do with the texture size or so...

                    PersonBehaviourComponent.SetBruiseColor(1, 0, 178); //Here we set the R.G.B (Red, Green, Blue) values for our bruises -> this would be a blue like color...
                    PersonBehaviourComponent.SetSecondBruiseColor(124, 0, 70);
                    PersonBehaviourComponent.SetThirdBruiseColor(27, 26, 120);
                    PersonBehaviourComponent.SetRottenColour(202, 199, 104);
                    PersonBehaviourComponent.SetBloodColour(71, 200, 4); // this doesn't set the Liquid color of the human blood...if we want to change the blood type or color however, we musst then create our own "liquid"...,which I will show in a later Tutorial...

                    DecalDescriptor DecalDescriptor1 = ScriptableObject.CreateInstance<DecalDescriptor>(); //Overrides or gets the DecalDescriptor, which handles some stuff about the Blood, ect...

                    foreach (LimbBehaviour Limb in PersonBehaviourComponent.Limbs) //Gets every Personbehaviour in each Limb...
                    {
                        DecalDescriptor1.Sprites = Limb.BloodDecal.Sprites; //Sets BloodDecalsprites...
                        DecalDescriptor1.IgnoreRadius = Limb.BloodDecal.IgnoreRadius; //something about the radius of the Decals...
                        DecalDescriptor1.Color = new Color(LimeSlime.RedColorValue, LimeSlime.GreenColorValue, LimeSlime.BlueColorValue, LimeSlime.TransparencyValue); //Sets the Decal Color to the of our own custom Liquid...(R,G,B,A)
                        Limb.BloodDecal = DecalDescriptor1; //Overrides foreach Limb the DecalDescriptor....
                        Limb.BloodLiquidType = "LimeSlime"; //Sets the Bloodtype to our own custom Liquid
                        Limb.CirculationBehaviour.Drain(Limb.CirculationBehaviour.Limits.y); //Drains every other Liquid in the Human...
                        double num = (double)Limb.CirculationBehaviour.AddLiquid(Liquid.GetLiquid("LimeSlime"), Limb.CirculationBehaviour.Limits.y); //Fills the Human with our Custom Blood instead...
                    }
                }
            });
        }
    }

    public class LimeSlime : Blood
    {
        public new const string ID = "LimeSlime"; //The ID of Custom Blood...
        public new const float RedColorValue = 0.25f; //Red Value...
        public new const float GreenColorValue = 0.8f; //Green Value...
        public new const float BlueColorValue = 0.0f; //Blue Value...
        public new const float TransparencyValue = 1.0f; //The "Transperency" (Alpha) Value...1.0f is visible...0.5f is transparent...and 0.0f is invisible

        public LimeSlime() => this.Color = new Color(RedColorValue, GreenColorValue, BlueColorValue, TransparencyValue); //Sets the Color basically....

        public override void OnEnterContainer(BloodContainer container)
        {
            //do something, if our Liquid enters a Liquidcontainer...
        }

        public override void OnEnterLimb(LimbBehaviour limb)
        {
            //do something, if our Liquid enters any type of Limb from an Entity(humans, androids, gorses, ect)...
        }

        public override void OnExitContainer(BloodContainer container)
        {
            //do something, if our Liquid leaves a Liquidcontainer...
        }
    }

    public class OrangeJuiceBlood : Blood
    {
        public new const string ID = "OrangeJuiceBlood"; //The ID of Custom Blood...
        public new const float RedColorValue = 0.825f; //Red Value...
        public new const float GreenColorValue = 0.7f; //Green Value...
        public new const float BlueColorValue = 0.0f; //Blue Value...
        public new const float TransparencyValue = 1.0f; //The "Transperency" (Alpha) Value...1.0f is visible...0.5f is transparent...and 0.0f is invisible

        public OrangeJuiceBlood() => this.Color = new Color(RedColorValue, GreenColorValue, BlueColorValue, TransparencyValue); //Sets the Color basically....

        public override void OnEnterContainer(BloodContainer container)
        {
            //do something, if our Liquid enters a Liquidcontainer...
        }

        public override void OnEnterLimb(LimbBehaviour limb)
        {
            //do something, if our Liquid enters any type of Limb from an Entity(humans, androids, gorses, ect)...
            if (limb.SpeciesIdentity == "Android")
                limb.PhysicalBehaviour.Charge += 0.1f;
            if (!(limb.SpeciesIdentity == "Gorse"))
                return;
            limb.Health -= 0.25f;
        }

        public override void OnExitContainer(BloodContainer container)
        {
            //do something, if our Liquid leaves a Liquidcontainer...
        }
    }
}